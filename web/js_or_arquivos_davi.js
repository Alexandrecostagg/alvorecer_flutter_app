// Base de dados b√≠blica completa - VERS√ÉO CORRIGIDA
const BibliaData = {
  dados: {
    genesis: {
      "1": {
        "1": "No princ√≠pio criou Deus os c√©us e a terra.",
        "2": "E a terra era sem forma e vazia; e havia trevas sobre a face do abismo; e o Esp√≠rito de Deus se movia sobre a face das √°guas.",
        "3": "E disse Deus: Haja luz; e houve luz.",
        "4": "E viu Deus que era boa a luz; e fez Deus separa√ß√£o entre a luz e as trevas.",
        "5": "E Deus chamou √† luz Dia; e √†s trevas chamou Noite. E foi a tarde e a manh√£, o dia primeiro."
      },
      "2": {
        "1": "Assim os c√©us, a terra e todo o seu ex√©rcito foram acabados.",
        "2": "E havendo Deus acabado no dia s√©timo a obra que fizera, descansou no s√©timo dia de toda a sua obra, que tinha feito.",
        "3": "E aben√ßoou Deus o dia s√©timo, e o santificou; porque nele descansou de toda a sua obra que Deus criara e fizera.",
        "4": "Estas s√£o as origens dos c√©us e da terra, quando foram criados; no dia em que o Senhor Deus fez a terra e os c√©us.",
        "5": "E toda a planta do campo que ainda n√£o estava na terra, e toda a erva do campo que ainda n√£o brotava; porque ainda o Senhor Deus n√£o tinha feito chover sobre a terra, e n√£o havia homem para lavrar a terra."
      },
      "3": {
        "1": "Ora, a serpente era mais astuta que todas as alim√°rias do campo que o Senhor Deus tinha feito. E esta disse √† mulher: √â assim que Deus disse: N√£o comereis de toda a √°rvore do jardim?",
        "2": "E disse a mulher √† serpente: Do fruto das √°rvores do jardim comeremos,",
        "3": "Mas do fruto da √°rvore que est√° no meio do jardim, disse Deus: N√£o comereis dele, nem nele tocareis para que n√£o morrais."
      }
    },
    exodo: {
      "1": {
        "1": "Ora, estes s√£o os nomes dos filhos de Israel, que entraram no Egito com Jac√≥; cada um entrou com a sua fam√≠lia:",
        "2": "R√∫ben, Sime√£o, Levi, e Jud√°;",
        "3": "Issacar, Zebulom, e Benjamim;"
      }
    },
    salmos: {
      "1": {
        "1": "Bem-aventurado o homem que n√£o anda segundo o conselho dos √≠mpios, nem se det√©m no caminho dos pecadores, nem se assenta na roda dos escarnecedores.",
        "2": "Antes tem o seu prazer na lei do Senhor, e na sua lei medita de dia e de noite.",
        "3": "Pois ser√° como a √°rvore plantada junto a ribeiros de √°guas, a qual d√° o seu fruto no seu tempo; as suas folhas n√£o cair√£o, e tudo quanto fizer prosperar√°."
      },
      "23": {
        "1": "O Senhor √© o meu pastor, nada me faltar√°.",
        "2": "Deitar-me faz em verdes pastos, guia-me mansamente a √°guas quietas.",
        "3": "Refrigera a minha alma; guia-me pelas veredas da justi√ßa, por amor do seu nome."
      }
    },
    mateus: {
      "1": {
        "1": "Livro da gera√ß√£o de Jesus Cristo, filho de Davi, filho de Abra√£o.",
        "2": "Abra√£o gerou a Isaque; e Isaque gerou a Jac√≥; e Jac√≥ gerou a Jud√° e a seus irm√£os;",
        "3": "E Jud√° gerou, de Tamar, a Far√©s e a Zar√°; e Far√©s gerou a Esrom; e Esrom gerou a Ar√£o;"
      }
    },
    joao: {
      "1": {
        "1": "No princ√≠pio era o Verbo, e o Verbo estava com Deus, e o Verbo era Deus.",
        "2": "Ele estava no princ√≠pio com Deus.",
        "3": "Todas as coisas foram feitas por ele, e sem ele nada do que foi feito se fez."
      },
      "3": {
        "16": "Porque Deus amou o mundo de tal maneira que deu o seu Filho unig√™nito, para que todo aquele que nele cr√™ n√£o pere√ßa, mas tenha a vida eterna."
      }
    }
  },

  // Configura√ß√£o dos testamentos
  testamentos: {
    antigo: ['genesis', 'exodo', 'salmos'],
    novo: ['mateus', 'joao']
  },

  // Nomes amig√°veis dos livros
  nomesLivros: {
    genesis: 'G√™nesis',
    exodo: '√äxodo', 
    salmos: 'Salmos',
    mateus: 'Mateus',
    joao: 'Jo√£o'
  },

  // M√©todos de acesso
  getLivros: function(testamento) {
    try {
      if (testamento) {
        return this.testamentos[testamento] || [];
      }
      return Object.keys(this.dados);
    } catch (error) {
      console.error('Erro ao buscar livros:', error);
      return [];
    }
  },

  getLivrosAntigo: function() {
    return this.getLivros('antigo');
  },

  getLivrosNovo: function() {
    return this.getLivros('novo');
  },

  getCapitulos: function(livro) {
    try {
      const dados = this.dados[livro.toLowerCase()];
      if (dados) {
        return Object.keys(dados).map(function(key) {
          return parseInt(key, 10);
        }).sort(function(a, b) {
          return a - b;
        });
      }
      return [];
    } catch (error) {
      console.error('Erro ao buscar cap√≠tulos:', error);
      return [];
    }
  },

  getCapitulo: function(livro, capitulo) {
    try {
      const dados = this.dados[livro.toLowerCase()];
      if (dados && dados[capitulo.toString()]) {
        return dados[capitulo.toString()];
      }
      console.warn('Cap√≠tulo', capitulo, 'do livro', livro, 'n√£o encontrado');
      return {};
    } catch (error) {
      console.error('Erro ao buscar cap√≠tulo:', error);
      return {};
    }
  },

  getVersiculo: function(livro, capitulo, versiculo) {
    try {
      const cap = this.getCapitulo(livro, capitulo);
      return cap[versiculo.toString()] || null;
    } catch (error) {
      console.error('Erro ao buscar vers√≠culo:', error);
      return null;
    }
  },

  getNomeLivro: function(livro) {
    return this.nomesLivros[livro.toLowerCase()] || livro;
  },

  buscar: function(termo) {
    var resultados = [];
    var termoLower = termo.toLowerCase();
    
    for (var livro in this.dados) {
      if (this.dados.hasOwnProperty(livro)) {
        var capitulos = this.dados[livro];
        for (var capNum in capitulos) {
          if (capitulos.hasOwnProperty(capNum)) {
            var versiculos = capitulos[capNum];
            for (var versNum in versiculos) {
              if (versiculos.hasOwnProperty(versNum)) {
                var texto = versiculos[versNum];
                if (texto.toLowerCase().indexOf(termoLower) !== -1) {
                  resultados.push({
                    livro: this.getNomeLivro(livro),
                    capitulo: parseInt(capNum, 10),
                    versiculo: parseInt(versNum, 10),
                    texto: texto
                  });
                }
              }
            }
          }
        }
      }
    }
    
    return resultados;
  }
};

// Fun√ß√µes globais para Flutter
window.getBibleBooks = function() {
  try {
    var livros = BibliaData.getLivros().map(function(livro) {
      return {
        id: livro,
        nome: BibliaData.getNomeLivro(livro),
        testamento: BibliaData.testamentos.antigo.indexOf(livro) !== -1 ? 'antigo' : 'novo'
      };
    });
    console.log('üìö Livros carregados:', livros);
    return JSON.stringify(livros);
  } catch (error) {
    console.error('Erro em getBibleBooks:', error);
    return JSON.stringify([]);
  }
};

window.getBibleChapters = function(book) {
  try {
    var capitulos = BibliaData.getCapitulos(book);
    console.log('üìñ Cap√≠tulos de', book + ':', capitulos);
    return JSON.stringify(capitulos);
  } catch (error) {
    console.error('Erro em getBibleChapters:', error);
    return JSON.stringify([]);
  }
};

window.getBibleVerses = function(book, chapter) {
  try {
    var chapterData = BibliaData.getCapitulo(book, chapter);
    
    var result = {
      book: book,
      chapter: parseInt(chapter, 10),
      verses: chapterData,
      version: 'Almeida Revista e Corrigida',
      success: true
    };
    
    console.log('üìú Vers√≠culos carregados:', result);
    return Promise.resolve(JSON.stringify(result));
  } catch (error) {
    console.error('Erro em getBibleVerses:', error);
    var errorResult = {
      book: book,
      chapter: parseInt(chapter, 10),
      verses: {},
      version: 'Almeida Revista e Corrigida',
      success: false,
      error: error.message
    };
    return Promise.resolve(JSON.stringify(errorResult));
  }
};

window.searchBible = function(query) {
  try {
    var results = BibliaData.buscar(query);
    console.log('üîç Resultados da busca:', results);
    return Promise.resolve(JSON.stringify(results));
  } catch (error) {
    console.error('Erro em searchBible:', error);
    return Promise.resolve(JSON.stringify([]));
  }
};

// Tornar dispon√≠vel globalmente
window.BibliaData = BibliaData;
console.log('‚úÖ BibliaData COMPLETO carregado com sucesso');
console.log('üìö Livros dispon√≠veis:', BibliaData.getLivros());
console.log('üìú Antigo Testamento:', BibliaData.getLivrosAntigo());
console.log('üìú Novo Testamento:', BibliaData.getLivrosNovo());

// Debug - teste das fun√ß√µes
try {
  console.log('üß™ Teste getBibleBooks:', window.getBibleBooks());
  console.log('üß™ Teste getBibleChapters(genesis):', window.getBibleChapters('genesis'));
} catch (error) {
  console.error('Erro nos testes:', error);
}